@page "/counter"
@inject MqttService MqttService
<link href="/css/UnitStyle.css" rel="stylesheet" />



<MudPaper Class="pa-4 mt-4">
	<h1>Dubai Building</h1>

	<div class="form">
		<span>Room Number</span>
		<input class="input" placeholder="Room Input" required="" type="text">
		<span class="input-border"></span>

	</div>
	<div class="mt-4 d-flex justify-content-between">
		<MudButton Variant="Variant.Filled" DropShadow="false" Color="Color.Primary"><MudIcon Class="mr-5" Icon="fa-solid fa-plus" Size="Size.Small"></MudIcon>Add New Room</MudButton>
		<MudButton Class="ml-4" Variant="Variant.Filled" DropShadow="false" Color="Color.Primary"><MudIcon Class="mr-5" Icon="fa-solid fa-arrows-rotate" Size="Size.Small"></MudIcon>Refresh</MudButton>
	</div>
	<br />
	<br />
	<br />

	@if (MqttService.DeviceData == null)
	{
		<p>Loading data...</p>
	}
	else
	{
		@foreach (var floor in MqttService.DeviceData.Floors)
		{
			<div class="mt-2">
				<h2>Floor: @floor.FloorNumber</h2>
				<div class="card-container">
					@foreach (var room in floor.Rooms)
					{
						@foreach (var (roomNumber, voltage, current, power, energy) in
								room.RoomNumbers
								.Zip(room.Voltage, (n, v) => (n, v))
								.Zip(room.Current, (pair, i) => (pair.n, pair.v, i))
								.Zip(room.Power, (triplet, p) => (triplet.n, triplet.v, triplet.i, p))
								.Zip(room.Energy, (quad, e) => (quad.n, quad.v, quad.i, quad.p, e)))
						{
							<div class="card">
								<h3>Room @roomNumber</h3>
								<h4>Voltage: @voltage V</h4>
								<h4>Current: @current A</h4>
								<h4>Power: @power W</h4>
								<h4>Energy: @energy kWh</h4>
							</div>
						}
					}
				</div>
			</div>
		}
	}

	

</MudPaper>

@code {

	// Card data
	// public static DeviceData? devicedata { get; set; }
	
	private System.Timers.Timer? timer;

	protected override void OnInitialized()
	{
		// Ensure UI updates happen on the correct thread
		MqttService.CaptureSynchronizationContext();
		MqttService.OnChange += async () => await InvokeAsync(StateHasChanged);

		// Start a timer to refresh UI every 5 seconds
		timer = new System.Timers.Timer(5000);
		timer.Elapsed += async (sender, e) => await InvokeAsync(StateHasChanged);
		timer.AutoReset = true;
		timer.Start();
	}
	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			MqttService.OnChange += StateHasChanged;
		}
	}
	public void Dispose()
	{
		// Unsubscribe to avoid memory leaks
		MqttService.OnChange -= async () => await InvokeAsync(StateHasChanged);

		// Stop and dispose of the timer
		if (timer != null)
		{
			timer.Stop();
			timer.Dispose();
			timer = null;
		}
	}

	
}

