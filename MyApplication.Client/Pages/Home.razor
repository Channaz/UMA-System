@page "/"
@using MudBlazor
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.ChartJS.Common
@inject DeviceDataService DeviceData

<MudContainer>


	<div class="img-back" Style="background-color:white; border-radius:12px;">
		<h1 class="top-text">Name Building</h1>
		<div class="text-img">
			@if (DeviceData.DeviceData is not null)
			{
				var (totalV, totalI, totalP, totalE) = DeviceData.GetBuildingTotals();

				<h3>🏢 Building-Summary</h3>
				<p><strong>Voltage:</strong> @totalV.ToString("F2") V</p>
				<p><strong>Current:</strong> @totalI.ToString("F2") A</p>
				<p><strong>Power:</strong> @totalP.ToString("F2") W</p>
				<p><strong>Energy:</strong> @totalE.ToString("F2") J</p>
			}
		</div>
	</div>

	@* using with javascript *@
	<div class="bg-light">
		<MudPaper Class="pa-4 mt-4" Style="background-color:white; border-radius:12px;">
			<ChartComponent CanvasId="lineChart"
							Labels="XAxisLabels"
							Data="monthlyEnergy"
							AnnotationText="Total Energy"
							AnnotationIndex="5" />
		</MudPaper>
	</div>
	<div class="row pt-4">
		<div class="col-md-6">
			<MudPaper Class="p-5" Elevation="3" Style="background-color:white; border-radius:12px;">
				<MudChart Class="pt-5 pb-5" ChartType="ChartType.Donut" Width="300px" Height="300px"
						  InputData="@data" InputLabels="@labels">
					<CustomGraphics>
						<text class="donut-inner-text" x="50%" y="40%" dominant-baseline="middle"
							  text-anchor="middle" font-family="Helvetica" font-size="2">
							Overall Usage
						</text>
						<text class="donut-inner-text" x="50%" y="55%" dominant-baseline="middle"
							  text-anchor="middle" font-family="Helvetica" font-size="5">
							@data.Sum().ToString("N0")
						</text>
					</CustomGraphics>
				</MudChart>
			</MudPaper>
		</div>
		<div class="col-md-6">
			<MudPaper Class="pa-1 mt-4" Elevation="3" style="position: relative; height: 500px; width: 100%; align-content:center; background-color: white; border-radius:12px;">
				<div class="gauge-container">
					<GaugeComponent />
				</div>
			</MudPaper>
		</div>
	</div>
</MudContainer>


@code {

	private double[] data = new double[0];
	private string[] labels = new string[0];

	protected override async Task OnInitializedAsync()
	{

		DeviceData.OnChange += StateHasChanged; // 🔄 Refresh UI when data updates
		DeviceData.OnChange += HandleDataUpdate;
		await DeviceData.InitializeAsync();

		if (DeviceData.DeviceData?.Floors != null)
		{
			labels = DeviceData.DeviceData.Floors
				.Select(f => $"Floor {f.FloorNumber}")
				.ToArray();

			data = DeviceData.GetEnergyPerFloor();
		}
	}

	private void HandleDataUpdate()
	{
		if (DeviceData.DeviceData?.Floors != null)
		{
			labels = DeviceData.DeviceData.Floors
				.Select(f => $"Floor {f.FloorNumber}")
				.ToArray();

			data = DeviceData.GetEnergyPerFloor();
		}

		InvokeAsync(StateHasChanged); // 🔄 Ensure UI updates on WebSocket message
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await DeviceData.ConnectWebSocketAsync();
		}
	}
	// Labels for X-Axis remain fixed (January to December)
	private readonly string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };

	private double[] monthlyEnergy = new double[12]; // Store monthly data

	private async Task LoadChartData()
	{
		await DeviceData.InitializeAsync(); // Fetch latest data
		UpdateChart();

	}

	private void UpdateChart()
	{
		if (DeviceData.DeviceData == null) return;

		// Sum Energy (E) for all rooms across all floors
		monthlyEnergy = DeviceData.DeviceData.Floors
			.Select(floor => floor.Rooms.SelectMany(room => room.Energy).Sum()) // Sum energy per floor
			.Take(12) // Ensure 12 months of data
			.ToArray();

		InvokeAsync(StateHasChanged); // Refresh UI
	}


	public ChartOptions Options = new ChartOptions();

	public List<ChartSeries> Series = new List<ChartSeries>()
	{
		new ChartSeries() { Name = "Category A", Data = new double[] { 20000, 30000, 40000 } },
		new ChartSeries() { Name = "Category A", Data = new double[] { 20000, 30000, 49999 } },
		new ChartSeries() { Name = "Category B", Data = new double[] { 15000, 25000, 35000 } },
		new ChartSeries() { Name = "Category C", Data = new double[] { 10000, 20000, 30000 } },
	};


}


