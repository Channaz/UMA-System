@inherits LayoutComponentBase
@inject MqttService MqttService
<script src="~/js/gauge.js"></script>
<script src="~/js/guage.min.js"></script>


<MudThemeProvider Theme="@_theme" IsDarkMode="@_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />


<MudLayout>
	<MudAppBar Elevation="1" Style="background-color:#ffffff;">
		<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
		<img src="images/UMA_LOGO.jpg" alt="" width="150" />
		<MudSpacer />

		<MudForm Class="" Style="width:500px;">
			<MudTextField @bind-Value="TextValue" Style="color:rgba(26,26,39,255); background-color:transparent; border:1px solid #1a1a27; border-radius:5px;" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
			<MudIcon Icon="fa fa-search" Class="ml-5 mt-3" Style="position:absolute; right:470px" />
		</MudForm>
		<MudSpacer />
		<MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Default" OnClick="@DarkModeToggle" />
		<MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
	</MudAppBar>
	<MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
		<NavMenu />
	</MudDrawer>
	<MudMainContent Class="mt-16 pa-4">
		@Body
	</MudMainContent>
</MudLayout>


<div id="blazor-error-ui">
	An unhandled error has occurred.
	<a href="" class="reload">Reload</a>
	<a class="dismiss">🗙</a>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation"></script>
<script src="chart.js"></script> <!-- Ensure chart.js exists in wwwroot -->
@code {
	private bool _drawerOpen = true;
	private bool _isDarkMode = true;

	private MudTheme? _theme = null;


	protected override void OnInitialized()
	{
		base.OnInitialized();

		_theme = new()
			{
				PaletteLight = _lightPalette,
				PaletteDark = _darkPalette,
				LayoutProperties = new LayoutProperties()
			};

	}

	protected override async Task OnInitializedAsync()
	{
		MqttService.CaptureSynchronizationContext();
		await MqttService.ConnectAsync();
		MqttService.SubscribeToTopic("test/uma");
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			MqttService.OnChange += StateHasChanged;
		}
	}

	public void Dispose()
	{
		MqttService.OnChange -= StateHasChanged; // ✅ Safe null check
	}


	// public event EventCallback OnChange;

	// private async Task NotifyStateChanged()
	// {
	// 	await OnChange.InvokeAsync();
	// }

	private void DrawerToggle()
	{
		_drawerOpen = !_drawerOpen;
	}

	private void DarkModeToggle()
	{
		_isDarkMode = !_isDarkMode;
	}


	private readonly PaletteLight _lightPalette = new()
		{
			Black = "#110e2d",
			AppbarText = "#424242",
			AppbarBackground = "rgba(255,255,255,0.8)",
			DrawerBackground = "#ffffff",
			GrayLight = "#e8e8e8",
			GrayLighter = "#f9f9f9",
		};

	private readonly PaletteDark _darkPalette = new()
		{
			Primary = "#7e6fff",
			Surface = "#1e1e2d",
			Background = "#1a1a27",
			BackgroundGray = "#151521",
			AppbarText = "#92929f",
			AppbarBackground = "rgba(26,26,39,0.8)",
			DrawerBackground = "#1a1a27",
			ActionDefault = "#74718e",
			ActionDisabled = "#9999994d",
			ActionDisabledBackground = "#605f6d4d",
			TextPrimary = "#b2b0bf",
			TextSecondary = "#92929f",
			TextDisabled = "#ffffff33",
			DrawerIcon = "#92929f",
			DrawerText = "#92929f",
			GrayLight = "#2a2833",
			GrayLighter = "#1e1e2d",
			Info = "#4a86ff",
			Success = "#3dcb6c",
			Warning = "#ffb545",
			Error = "#ff3f5f",
			LinesDefault = "#33323e",
			TableLines = "#33323e",
			Divider = "#292838",
			OverlayLight = "#1e1e2d80",
		};

	public string DarkLightModeButtonIcon => _isDarkMode switch
	{
		true => Icons.Material.Rounded.AutoMode,
		false => Icons.Material.Outlined.DarkMode,
	};


	public string? TextValue { get; set; }
	

	// public void HandleMqttMessage(string message)
	// {
	// 	try
	// 	{

	// 		// var receivedData = JsonSerializer.Deserialize<DeviceData>(message, new JsonSerializerOptions
	// 		// 	{
	// 		// 		PropertyNameCaseInsensitive = true
	// 		// 	});

	// 		// if (receivedData != null)
	// 		// {
	// 		// 	Pages.Counter.devicedata = receivedData; // Update data
	// 		// 	Console.WriteLine("Data Updated! Calling StateHasChanged...");
	// 		// 	InvokeAsync(StateHasChanged); // Trigger UI update
	// 		// }


	// 	}
	// 	catch (Exception ex)
	// 	{
	// 		Console.WriteLine($"Error parsing MQTT message: {ex.Message}");
	// 	}
	// }

	// private bool _isInitialized = false;
	// private DeviceData? _deviceData;

	// protected override async Task OnAfterRenderAsync(bool firstRender)
	// {
	// 	if (firstRender && !_isInitialized)
	// 	{
	// 		_isInitialized = true; // Prevent multiple calls
	// 		await LoadFromLocalStorage();
	// 	}
	// }

	// private async Task LoadFromLocalStorage()
	// {
	// 	try
	// 	{
	// 		string? data = await _jsRuntime.InvokeAsync<string>("localStorage.getItem", "mqttData");
	// 		if (!string.IsNullOrEmpty(data))
	// 		{
	// 			_deviceData = JsonSerializer.Deserialize<DeviceData>(data);
	// 			StateHasChanged(); // Trigger UI update
	// 		}
	// 	}
	// 	catch (Exception ex)
	// 	{
	// 		Console.WriteLine($"JS Interop Error: {ex.Message}");
	// 	}
	// }

}


